package org.example.proect.lavka.service;

import lombok.RequiredArgsConstructor;
import org.example.proect.lavka.dao.CardTovExportDao;
import org.example.proect.lavka.dto.CardTovExportDto;
import org.example.proect.lavka.dto.CardTovExportOutDto;
import org.example.proect.lavka.service.category.WooCategoryService;
import org.springframework.lang.Nullable;
import org.springframework.stereotype.Service;

import java.nio.charset.StandardCharsets;
import java.security.MessageDigest;
import java.util.*;
import java.util.stream.Collectors;

@Service
@RequiredArgsConstructor
public class CardTovExportService {

    private final CardTovExportDao dao;
    private final WooCategoryService wooCategoryService;

    // ====== –≤—Ö–æ–¥ –æ—Ç —Ñ—Ä–æ–Ω—Ç–∞ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ======
    public record ItemHash(String sku, @Nullable String hash) {}

    // üîÅ –ù–û–í–´–ô –æ—Ç–≤–µ—Ç: —Ç–æ–ª—å–∫–æ –ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∫–∞—Ä—Ç–æ—á–µ–∫ + –ø–∞–≥–∏–Ω–∞—Ü–∏—è
    public record DiffResult(
            String nextAfter,
            boolean last,
            List<CardTovExportOutDto> toUpdateFull,
            List<String> toDelete,
            List<CardTovExportOutDto> toCreateFull
    ) {}

    // ====== –ü—É–±–ª–∏—á–Ω—ã–µ –º–µ—Ç–æ–¥—ã ======

    /** –°—Ç–∞—Ä–∞—è —Å—Ç—Ä–∞–Ω–∏—á–Ω–∞—è –≤—ã–¥–∞—á–∞ ‚Äî –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π (—Ç–æ–ª—å–∫–æ –¥–æ–±–∞–≤—å—Ç–µ hash –≤ out DTO) */
    public PageResult page(String afterSku, int limit) {
        List<CardTovExportDto> items = dao.findPage(afterSku, limit);
        List<CardTovExportOutDto> mapped = items.stream()
                .map(this::mapWithGroup)
                .map(this::withHash) // ‚Üê –¥–æ–±–∞–≤–∏–ª–∏ hash
                .toList();

        String nextAfter = mapped.isEmpty() ? null : mapped.get(mapped.size() - 1).sku();
        boolean lastPage = mapped.isEmpty() || mapped.size() < Math.max(1, limit);
        return new PageResult(mapped, nextAfter, lastPage);
    }

    public DiffResult diffPage(String afterSku, int limit, List<ItemHash> seen) {
        // 1) Woo ‚Üí –∫–∞—Ä—Ç–∞ sku->hash
        Map<String, String> wooBySku = (seen == null ? List.<ItemHash>of() : seen).stream()
                .filter(it -> it != null && notBlank(it.sku()))
                .collect(Collectors.toMap(it -> it.sku().trim(), it -> nz(it.hash()), (a,b)->a));

        List<String> wooSkus = new ArrayList<>(wooBySku.keySet());
        Collections.sort(wooSkus);

        if (wooSkus.isEmpty()) {
            var page = page(afterSku, limit); // —Ç—É—Ç —É–∂–µ withHash() —Å—á–∏—Ç–∞–µ—Ç —Å groupId
            return new DiffResult(page.nextAfter(), page.last(), List.of(), List.of(), page.items());
        }

        // 2) –ü–æ –ø—Ä–∏—Å–ª–∞–Ω–Ω—ã–º SKU –ø–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ MSSQL
        List<CardTovExportDto> fromMsByIn = dao.findBySkus(wooSkus);
        Set<String> foundInMs = fromMsByIn.stream().map(CardTovExportDto::getSku).collect(Collectors.toSet());

        // –ö–∞–Ω–¥–∏–¥–∞—Ç—ã –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ: –µ—Å—Ç—å –≤ Woo, –Ω–µ—Ç –≤ MSSQL
        List<String> toDelete = wooSkus.stream()
                .filter(sku -> !foundInMs.contains(sku))
                .toList();

        // –£–±–∏—Ä–∞–µ–º –∏—Ö –∏–∑ —Ä–∞–±–æ—á–∏—Ö –º–Ω–æ–∂–µ—Å—Ç–≤, —á—Ç–æ–±—ã –Ω–µ –ø–æ–ø–∞–ª–∏ –≤ update/create
        wooSkus.removeAll(toDelete);
        wooBySku.keySet().removeAll(toDelete);

        // 3) –î–µ–ª–∞–µ–º "—Å–Ω–∏–º–æ–∫" MS —Å —É—á—ë—Ç–æ–º groupId (ensureCategoryPath) ‚Üí —Å—á–∏—Ç–∞–µ–º hash –ø–æ —Å–Ω–∏–º–∫—É
        // –≠—Ç–æ –∫–ª—é—á–µ–≤–æ–π –º–æ–º–µ–Ω—Ç: hash –≤–∫–ª—é—á–∞–µ—Ç groupId
        List<CardTovExportOutDto> msSnapshot = fromMsByIn.stream()
                .map(this::mapWithGroup)   // –ø—Ä–æ—Å—Ç–∞–≤–ª—è–µ–º groupId
                .map(this::withHash)       // —Å—á–∏—Ç–∞–µ–º hash —Å —É—á—ë—Ç–æ–º groupId
                .toList();

        Map<String, CardTovExportOutDto> msBySku = msSnapshot.stream()
                .collect(Collectors.toMap(CardTovExportOutDto::sku, x -> x, (a,b)->a));

        // 4) –û–±–Ω–æ–≤–ª–µ–Ω–∏—è: –µ—Å—Ç—å –≤ MSSQL, –Ω–æ hash –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –æ—Ç –ø—Ä–∏—Å–ª–∞–Ω–Ω–æ–≥–æ –∏–∑ Woo
        List<CardTovExportOutDto> toUpdateFull = wooSkus.stream()
                .map(msBySku::get)
                .filter(Objects::nonNull)
                .filter(o -> !Objects.equals(o.hash(), wooBySku.get(o.sku())))
                .toList();

        // 5) –ù–æ–≤—ã–µ: (min..max) \ –ø—Ä–∏—Å–ª–∞–Ω–Ω—ã–µ SKU
        String minSku = wooSkus.isEmpty() ? afterSku : wooSkus.get(0);
        String maxSku = wooSkus.isEmpty() ? afterSku : wooSkus.get(wooSkus.size() - 1);

        int cap = Math.max(1, Math.min(limit, 1000));
        List<CardTovExportOutDto> toCreateFull = (minSku != null && maxSku != null && !minSku.equals(maxSku))
                ? dao.findBetweenExcluding(minSku, maxSku, wooSkus, cap).stream()
                .map(this::mapWithGroup)  // groupId
                .map(this::withHash)      // hash c groupId
                .toList()
                : List.of();

        String nextAfter = maxSku;
        boolean last = toUpdateFull.isEmpty() && toCreateFull.isEmpty() && toDelete.isEmpty();

        return new DiffResult(nextAfter, last, toUpdateFull, toDelete, toCreateFull);
    }

    // ====== –ø—Ä–∏–≤–∞—Ç–Ω—ã–µ –≤—Å–ø–æ–º–æ–≥–∞–ª–∫–∏ ======

    /** –í–∞—à —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –º–∞–ø–ø–µ—Ä + –ø–æ–ª—É—á–µ–Ω–∏–µ groupId */
    private CardTovExportOutDto mapWithGroup(CardTovExportDto d) {
        String l1 = nz(d.getNGROUP_TVR());
        String l2 = nz(d.getNGROUP_TV2());
        String l3 = nz(d.getNGROUP_TV3());
        String l4 = nz(d.getNGROUP_TV4());
        String l5 = nz(d.getNGROUP_TV5());
        String l6 = nz(d.getNGROUP_TV6());

        Long groupId = null;
        if (notBlank(l1) || notBlank(l2) || notBlank(l3) || notBlank(l4) || notBlank(l5) || notBlank(l6)) {
            groupId = wooCategoryService.ensureCategoryPath(
                    emptyToNull(l1), emptyToNull(l2), emptyToNull(l3),
                    emptyToNull(l4), emptyToNull(l5), emptyToNull(l6)
            );
        }

        return new CardTovExportOutDto(
                d.getSku(),
                d.getName(),
                d.getImg(),
                d.getEDIN_IZMER(),
                d.getGlobal_unique_id(),
                d.getWeight(),
                d.getLength(),
                d.getWidth(),
                d.getHeight(),
                d.getStatus(),
                d.getVES_EDINIC(),
                d.getDESCRIPTION(),
                d.getRAZM_IZMER(),
                d.getGr_descr(),
                groupId,
                null // hash –¥–æ–±–∞–≤–∏–º –Ω–∏–∂–µ
        );
    }

    /** –î–æ–±–∞–≤–ª—è–µ–º hash –≤ out-DTO (record —Å –ø–æ–ª–µ–º hash –≤ –∫–æ–Ω—Ü–µ) */
    private CardTovExportOutDto withHash(CardTovExportOutDto o) {
        String h = calcHash(o); // —Ç–µ–ø–µ—Ä—å –≤–∫–ª—é—á–∞–µ—Ç groupId
        return new CardTovExportOutDto(
                o.sku(), o.name(), o.img(), o.edinIzmer(), o.globalUniqueId(),
                o.weight(), o.length(), o.width(), o.height(), o.status(),
                o.vesEdinic(), o.description(), o.razmIzmer(), o.grDescr(), o.groupId(),
                h
        );
    }

    /** –•–µ—à —Å—á–∏—Ç–∞–µ–º –ø–æ –∫–∞–Ω–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º –∏—Å—Ç–æ—á–Ω–∏–∫–∞ + groupId. */
    private String calcHash(CardTovExportOutDto o) {
        String payload = String.join("|",
                nz(o.sku()),
                nz(o.name()),
                nz(o.img()),
                nz(o.edinIzmer()),
                nz(o.globalUniqueId()),
                fmt(o.weight()),
                fmt(o.length()),
                fmt(o.width()),
                fmt(o.height()),
                String.valueOf(o.status() == null ? 0 : o.status()),
                fmt(o.vesEdinic()),
                nz(o.description()),
                nz(o.razmIzmer()),
                nz(o.grDescr()),
                // –í–ê–ñ–ù–û: —Ç–µ–ø–µ—Ä—å —É—á–∏—Ç—ã–≤–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é (groupId)
                String.valueOf(o.groupId() == null ? 0L : o.groupId())
        );
        return sha256hex(payload);
    }

    private static String sha256hex(String s) {
        try {
            MessageDigest md = MessageDigest.getInstance("SHA-256");
            byte[] out = md.digest(s.getBytes(StandardCharsets.UTF_8));
            StringBuilder sb = new StringBuilder(out.length * 2);
            for (byte b : out) sb.append(String.format("%02x", b));
            return sb.toString();
        } catch (Exception e) {
            throw new IllegalStateException("hash error", e);
        }
    }

    private static String fmt(Number n) { return n == null ? "" : (n instanceof Integer || n instanceof Long) ? String.valueOf(n) : stripTrailingZeros(n.doubleValue()); }
    private static String stripTrailingZeros(double v) {
        String s = Double.toString(v);
        if (s.contains("E") || s.contains("e")) return s; // –Ω–µ —Ç—Ä–æ–≥–∞–µ–º —ç–∫—Å–ø–æ–Ω–µ–Ω—Ç—É
        if (s.indexOf('.') >= 0) {
            while (s.endsWith("0")) s = s.substring(0, s.length()-1);
            if (s.endsWith(".")) s = s.substring(0, s.length()-1);
        }
        return s;
    }
    private static String nz(String s) { return s == null ? "" : s.trim(); }
    private static boolean notBlank(String s) { return s != null && !s.trim().isEmpty(); }
    private static String emptyToNull(String s) { return (s == null || s.trim().isEmpty()) ? null : s.trim(); }

    // —Å—Ç–∞—Ä–∞—è —Å—Ç—Ä–∞–Ω–∏—á–Ω–∞—è –≤—ã–¥–∞—á–∞
    public record PageResult(List<CardTovExportOutDto> items, String nextAfter, boolean last) {}
}