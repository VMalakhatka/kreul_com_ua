package org.example.proect.lavka.utils;


/*
*
* üß© ‚ë° –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞ —Ç—è–∂—ë–ª—ã—Ö –∑–∞–¥–∞—á (Semaphore)
–ò–Ω–æ–≥–¥–∞ –ø–æ–ª–µ–∑–Ω–æ –Ω–µ –∑–∞–ø—É—Å–∫–∞—Ç—å 10 –ø–æ—Ç–æ–∫–æ–≤ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ.
*
* –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å–µ—Ä–≤–∏—Å–µ:
@Service
@RequiredArgsConstructor
public class PriceSyncService {

    private final HeavyTaskLimiter limiter;
    private final PriceService priceService;

    public void syncAllPrices() {
        limiter.runSafely("price-sync", () -> {
            priceService.resolve(...);
            return null;
        });
    }
}
* */


import lombok.extern.slf4j.Slf4j;
import org.springframework.stereotype.Component;

import java.util.concurrent.Semaphore;
import java.util.function.Supplier;

@Slf4j
@Component
public class HeavyTaskLimiter {

    // –ø—Ä–∏–º–µ—Ä: –º–∞–∫—Å–∏–º—É–º 2 —Ç—è–∂—ë–ª—ã—Ö –∑–∞–¥–∞—á–∏ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
    private final Semaphore semaphore = new Semaphore(2);

    public <T> T runSafely(String name, Supplier<T> action) {
        try {
            semaphore.acquire();
            log.debug("üö¶ Start heavy task: {}", name);
            return action.get();
        } catch (InterruptedException e) {
            Thread.currentThread().interrupt();
            throw new RuntimeException("Interrupted waiting for heavy task slot", e);
        } finally {
            semaphore.release();
            log.debug("‚úÖ Finish heavy task: {}", name);
        }
    }
}