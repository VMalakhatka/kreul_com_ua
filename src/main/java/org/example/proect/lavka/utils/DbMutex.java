package org.example.proect.lavka.utils;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Component;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.support.TransactionTemplate;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.util.Objects;
import java.util.concurrent.Callable;
import java.util.function.Supplier;

@Slf4j
@Component
@RequiredArgsConstructor
public class DbMutex {

    private final JdbcTemplate jdbc;
    private final PlatformTransactionManager txManager;

    /**
     * –í—ã–ø–æ–ª–Ω—è–µ—Ç body –ø–æ–¥ applock (Exclusive), –≥–¥–µ –≤–ª–∞–¥–µ–ª—å—Ü–µ–º –∑–∞–º–∫–∞ —è–≤–ª—è–µ—Ç—Å—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—è.
     * –í–ê–ñ–ù–û: –≤—Å—è —Ä–∞–±–æ—Ç–∞ –∏–¥—ë—Ç –≤ –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏ –∏ –Ω–∞ –æ–¥–Ω–æ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏.
     */
    public <T> T withAppLock(String resource, int timeoutMs, Supplier<T> body) {
        Objects.requireNonNull(resource, "resource");
        if (timeoutMs < 0) timeoutMs = 0;

        var tt = new TransactionTemplate(txManager);
        int finalTimeoutMs = timeoutMs;
        return tt.execute(status -> {
            int rc = acquireTxLock(resource, finalTimeoutMs);
            if (rc < 0) {
                // –±—Ä–æ—Å–∞–µ–º transient –∏—Å–∫–ª—é—á–µ–Ω–∏–µ ‚Äî —á—Ç–æ–±—ã –µ–≥–æ –ø–µ—Ä–µ—Ö–≤–∞—Ç–∏–ª Spring Retry –≤—ã—à–µ –ø–æ —Å—Ç–µ–∫—É
                throw new org.springframework.dao.CannotAcquireLockException(
                        "sp_getapplock failed: rc=" + rc + " resource=" + resource);
            }

            try {
                T result = body.get();
                return result;
            } finally {
                // –ø—Ä–∏ LockOwner='Transaction' lock –∏ —Ç–∞–∫ –æ—Å–≤–æ–±–æ–¥–∏—Ç—Å—è –Ω–∞ COMMIT/ROLLBACK,
                // –Ω–æ —è–≤–Ω—ã–π release –±–µ–∑–æ–ø–∞—Å–Ω–µ–µ.
                try {
                    jdbc.update("EXEC sp_releaseapplock @Resource=?, @LockOwner='Transaction'", resource);
                } catch (Exception e) {
                    log.warn("sp_releaseapplock failed for resource={}: {}", resource, e.toString());
                }
            }
        });
    }

    /** –£–¥–æ–±–Ω–∞—è void-–æ–±—ë—Ä—Ç–∫–∞. */
    public void withAppLock(String resource, int timeoutMs, Runnable body) {
        withAppLock(resource, timeoutMs, () -> { body.run(); return null; });
    }

    /** –ï—Å–ª–∏ –Ω—É–∂–µ–Ω Callable —Å checked –∏—Å–∫–ª—é—á–µ–Ω–∏—è–º–∏. */
    public <T> T withAppLockCall(String resource, int timeoutMs, Callable<T> body) {
        return withAppLock(resource, timeoutMs, () -> {
            try {
                return body.call();
            } catch (RuntimeException re) {
                throw re;
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        });
    }

    /** –ë–µ—Ä—ë–º applock –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º RC (>=0 ‚Äî —É—Å–ø–µ—Ö, <0 ‚Äî –æ—à–∏–±–∫–∞/—Ç–∞–π–º–∞—É—Ç/–¥–µ–¥–ª–æ–∫). */
    private int acquireTxLock(String resource, int timeoutMs) {
        return jdbc.execute((Connection con) -> {  // üëà —É–∫–∞–∑–∞–ª–∏ —è–≤–Ω–æ —Ç–∏–ø
            try (PreparedStatement ps = con.prepareStatement(
                    "DECLARE @rc INT; " +
                            "EXEC @rc = sp_getapplock " +
                            "  @Resource = ?, " +
                            "  @LockMode = 'Exclusive', " +
                            "  @LockOwner = 'Transaction', " +
                            "  @LockTimeout = ?; " +
                            "SELECT @rc;")) {

                ps.setString(1, resource);
                ps.setInt(2, timeoutMs);

                try (ResultSet rs = ps.executeQuery()) {
                    rs.next();
                    int rc = rs.getInt(1);
                    if (rc < 0) {
                        log.warn("sp_getapplock rc={} resource={} (timeoutMs={})", rc, resource, timeoutMs);
                    } else {
                        log.debug("sp_getapplock OK rc={} resource={}", rc, resource);
                    }
                    return rc;
                }
            }
        });
    }

    /** –•–µ–ª–ø–µ—Ä: —É–¥–æ–±–Ω–µ–µ –∏–º–µ–Ω–æ–≤–∞—Ç—å —Ä–µ—Å—É—Ä—Å—ã –∫–æ–Ω—Å–∏—Å—Ç–µ–Ω—Ç–Ω–æ. */
    public static String resource(String... parts) {
        return String.join("|", parts);
    }
}